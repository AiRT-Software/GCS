#pragma kernel CreateTriangles

//WE WILL USE ONLY 1 DIMENSION FOR OUR BUFFERS
//so you can access each buffer's item with id.x
//Incoming points are in UNITY's World-Space coordinates

#define thread_group_size_x 32
#define thread_group_size_y 1

struct Triangle {
	//36 bytes
	float3 p1;
	float3 p2;
	float3 p3;
};

//Predefined-triangle to be rotated to the incoming vertex's normal and translated to the incoming vertex's position
//Equilater triangle on the XY Plane (Unity's WorldCS) with 3 cm side
struct BaseTriangle {
	//64 bytes
	float4 p1;
	float4 p2;
	float4 p3;
	float4 normal;  //left-handed
};

//readonly uniforms
StructuredBuffer<BaseTriangle> base_triangle;  //64 bytes element
StructuredBuffer<float3> points;  //12 bytes element
StructuredBuffer<float3> normals;  //12 bytes element

//read/write
RWStructuredBuffer<Triangle> triangles;  //36 bytes element


//s and t need to be unit vectors
float4x4 rotationFromStoT(float3 s, float3 t)
{
	//TODO: beacause s = triangle-normal and it has fixed values then we can replace them into the matrix

	//projection of s over t
	float e = dot(s, t);

	//same directions
	if(e == 1)
	{
		return float4x4(
			float4(1.0, 0.0, 0.0, 0.0),
			float4(0.0, 1.0, 0.0, 0.0),
			float4(0.0, 0.0, 1.0, 0.0),
			float4(0.0, 0.0, 0.0, 1.0)
		);
	}

	//opposite directions
	else if(e == -1.0)
	{
		//since base_triangle normal is (0, 0, -1) and the opposite direction is (0, 0, +1)
		//then we can create a Rot_Y(180º) matrix

		//float cos_a = cos(3.14159265359), sin_a = sin(3.14159265359);
		float cos_a = -1.0, sin_a = 0.0;

		//ordered by columns
		//float4 col1 = float4(cos_a, 0.0, -sin_a, 0.0);
		//float4 col2 = float4(0.0, 1.0, 0.0, 0.0);
		//float4 col3 = float4(sin_a, 0.0, cos_a, 0.0);
		//float4 col4 = float4(0.0, 0.0, 0.0, 1.0);
		//return float4x4(col1, col2, col3, col4);

		//ordered by rows
		float4 row1 = float4(cos_a, 0.0, sin_a, 0.0);
		float4 row2 = float4(0.0, 1.0, 0.0, 0.0);
		float4 row3 = float4(-sin_a, 0.0, cos_a, 0.0);
		float4 row4 = float4(0.0, 0.0, 0.0, 1.0);

		return float4x4(row1, row2, row3, row4);
	}
	else 
	{
		//v is orthogonal to s and t
		float3 v = cross(s, t);
		float h = 1.0/(1.0 + e);

		//ordered by columns
		//float4 col1 = float4(e + (h * v.x * v.x), (h * v.x * v.y) + v.z, (h * v.x * v.z) - v.y, 0.0f);
		//float4 col2 = float4((h * v.x * v.y) - v.z, e + (h * v.y * v.y), (h * v.y * v.z) + v.x, 0.0f);
		//float4 col3 = float4((h * v.x * v.z) + v.y, (h * v.y * v.z) - v.x, e + (h * v.z * v.z), 0.0f);
		//float4 col4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
		//return float4x4(col1, col2, col3, col4);

		//ordered by rows
		float4 row1 = float4(e + (h * v.x * v.x), (h * v.x * v.y) - v.z, (h * v.x * v.z) + v.y, 0.0f);
		float4 row2 = float4((h * v.x * v.y) + v.z, e + (h * v.y * v.y), (h * v.y * v.z) - v.x, 0.0f);
		float4 row3 = float4((h * v.x * v.z) - v.y, (h * v.y * v.z) + v.x, e + (h * v.z * v.z), 0.0f);
		float4 row4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
		return float4x4(row1, row2, row3, row4);
	}
}

float4x4 translationToP(float3 p)
{
	//ordered by cols

	//float4 col1 = float4(1.0, 0.0, 0.0, 0.0);
	//float4 col2 = float4(0.0, 1.0, 0.0, 0.0);
	//float4 col3 = float4(0.0, 0.0, 1.0, 0.0);
	//float4 col4 = float4(p.x, p.y, p.z, 1.0);
	//return float4x4(col1, col2, col3, col4);

	//ordered by rows

	float4 row1 = float4(1.0, 0.0, 0.0, p.x);
	float4 row2 = float4(0.0, 1.0, 0.0, p.y);
	float4 row3 = float4(0.0, 0.0, 1.0, p.z);
	float4 row4 = float4(0.0, 0.0, 0.0, 1.0);

	return float4x4(row1, row2, row3, row4);
}

//num of threads per group
[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CreateTriangles (uint3 id : SV_DispatchThreadID)
{
	//int idx = id.x + id.y * thread_group_size_x * 24;  //bidimensional
	int idx = id.x;  //unidimensional
	
	float4x4 rot_mat = rotationFromStoT( normals[idx], base_triangle[0].normal.xyz );
	float4x4 tra_mat = translationToP(points[idx]);
	float4x4 tra_rot_mat = mul(tra_mat, rot_mat);

	triangles[idx].p1 = mul(tra_rot_mat, base_triangle[0].p1).xyz;
	triangles[idx].p2 = mul(tra_rot_mat, base_triangle[0].p2).xyz;
	triangles[idx].p3 = mul(tra_rot_mat, base_triangle[0].p3).xyz;

	//triangles[idx].p1 = mul(mul(rot_mat, base_triangle[0].p1), tra_mat).xyz;
	//triangles[idx].p2 = mul(mul(rot_mat, base_triangle[0].p2), tra_mat).xyz;
	//triangles[idx].p3 = mul(mul(rot_mat, base_triangle[0].p3), tra_mat).xyz;
}
